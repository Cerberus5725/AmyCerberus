// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5725.AmyCerberus.commands;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.networktables.NetworkTable;
import org.usfirst.frc5725.AmyCerberus.Robot;

/**
 *
 */
public class Vision extends Command {
	NetworkTable table;
	private boolean finish = false;


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public Vision() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    	table = NetworkTable.getTable("GRIP/myContourReport");
    	
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	// Distance to object will eventually not be needed as it will be an average from
    	// a network table array.
        double distanceToObject = (Math.random() * (10 + 10) - 10);
        // How close to target.
        double precision = 2.0;
    	while (Math.abs(distanceToObject) > precision && Math.abs(Robot.oi.getxBoxOne().getX()) < 0.1 && Math.abs(Robot.oi.getxBoxOne().getY()) < 0.1)
    	{
			// Temporary Log.  Eventually want to do something with array values.
				double[] defaultValue = new double[0];
				double[] areas= table.getNumberArray("area", defaultValue);
				System.out.print("areas: ");
				for (double area : areas){
        		System.out.print(area+" ");
				}
			// Turn based on the value from above.  Eventually distanceToObject 
			//Will come from vision tracking
    		if(distanceToObject > 0)
    		{
            	System.out.println();
            	Timer.delay(1);
    			// TurnRight
    			Robot.driveTrain.driveRight();
    			distanceToObject--;
    			
    		}
    		else if(distanceToObject < 0)
    		{
            	System.out.println();
            	Timer.delay(1);
    			// Turn Left
    			Robot.driveTrain.driveLeft();
    			distanceToObject++;
    		}
    		System.out.println("Distance to Object: " + String.valueOf(distanceToObject));
    	}
    	finish = true;
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {

    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return finish;
    }

    // Called once after isFinished returns true
    protected void end() {
    	Robot.driveTrain.stop();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	end();
    }
}
